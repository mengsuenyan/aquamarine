var searchIndex = JSON.parse('{\
"air_parser":{"doc":"","i":[[0,"ast","air_parser","",null,null],[4,"Instruction","air_parser::ast","",null,null],[13,"Null","","",0,null],[13,"Call","","",0,null],[13,"Seq","","",0,null],[13,"Par","","",0,null],[13,"Xor","","",0,null],[13,"Match","","",0,null],[13,"MisMatch","","",0,null],[13,"Fold","","",0,null],[13,"Next","","",0,null],[13,"Error","","",0,null],[4,"PeerPart","","",null,null],[13,"PeerPk","","",1,null],[13,"PeerPkWithServiceId","","",1,null],[4,"FunctionPart","","",null,null],[13,"FuncName","","",2,null],[13,"ServiceIdWithFuncName","","",2,null],[3,"Call","","",null,null],[12,"peer_part","","",3,null],[12,"function_part","","",3,null],[12,"args","","",3,null],[12,"output","","",3,null],[4,"CallArgValue","","",null,null],[13,"InitPeerId","","",4,null],[13,"Literal","","",4,null],[13,"Variable","","",4,null],[13,"JsonPath","","",4,null],[12,"variable","air_parser::ast::CallArgValue","",5,null],[12,"path","","",5,null],[4,"IterableValue","air_parser::ast","",null,null],[13,"Variable","","",6,null],[13,"JsonPath","","",6,null],[12,"variable","air_parser::ast::IterableValue","",7,null],[12,"path","","",7,null],[4,"MatchableValue","air_parser::ast","",null,null],[13,"Literal","","",8,null],[13,"Variable","","",8,null],[13,"JsonPath","","",8,null],[12,"variable","air_parser::ast::MatchableValue","",9,null],[12,"path","","",9,null],[4,"CallOutputValue","air_parser::ast","",null,null],[13,"Scalar","","",10,null],[13,"Accumulator","","",10,null],[13,"None","","",10,null],[3,"Seq","","",null,null],[12,"0","","",11,null],[12,"1","","",11,null],[3,"Par","","",null,null],[12,"0","","",12,null],[12,"1","","",12,null],[3,"Xor","","",null,null],[12,"0","","",13,null],[12,"1","","",13,null],[3,"Match","","",null,null],[12,"left_value","","",14,null],[12,"right_value","","",14,null],[12,"instruction","","",14,null],[3,"MisMatch","","",null,null],[12,"left_value","","",15,null],[12,"right_value","","",15,null],[12,"instruction","","",15,null],[3,"Fold","","",null,null],[12,"iterable","","",16,null],[12,"iterator","","",16,null],[12,"instruction","","",16,null],[3,"Next","","",null,null],[12,"0","","",17,null],[3,"Null","","",null,null],[5,"parse","air_parser","Parse AIR <code>source_code</code> to <code>Box<Instruction></code>",null,[[],[["box",3],["string",3],["result",4]]]],[3,"AIRLexer","","",null,null],[3,"AIRParser","","",null,null],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"into_iter","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","air_parser::ast","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"next","air_parser","",18,[[],["option",4]]],[11,"clone","","",19,[[],["airparser",3]]],[11,"clone","air_parser::ast","",4,[[],["callargvalue",4]]],[11,"clone","","",6,[[],["iterablevalue",4]]],[11,"clone","","",8,[[],["matchablevalue",4]]],[11,"clone","","",10,[[],["calloutputvalue",4]]],[11,"eq","","",0,[[["instruction",4]]]],[11,"ne","","",0,[[["instruction",4]]]],[11,"eq","","",1,[[["peerpart",4]]]],[11,"ne","","",1,[[["peerpart",4]]]],[11,"eq","","",2,[[["functionpart",4]]]],[11,"ne","","",2,[[["functionpart",4]]]],[11,"eq","","",3,[[["call",3]]]],[11,"ne","","",3,[[["call",3]]]],[11,"eq","","",4,[[["callargvalue",4]]]],[11,"ne","","",4,[[["callargvalue",4]]]],[11,"eq","","",6,[[["iterablevalue",4]]]],[11,"ne","","",6,[[["iterablevalue",4]]]],[11,"eq","","",8,[[["matchablevalue",4]]]],[11,"ne","","",8,[[["matchablevalue",4]]]],[11,"eq","","",10,[[["calloutputvalue",4]]]],[11,"ne","","",10,[[["calloutputvalue",4]]]],[11,"eq","","",11,[[["seq",3]]]],[11,"ne","","",11,[[["seq",3]]]],[11,"eq","","",12,[[["par",3]]]],[11,"ne","","",12,[[["par",3]]]],[11,"eq","","",13,[[["xor",3]]]],[11,"ne","","",13,[[["xor",3]]]],[11,"eq","","",14,[[["match",3]]]],[11,"ne","","",14,[[["match",3]]]],[11,"eq","","",15,[[["mismatch",3]]]],[11,"ne","","",15,[[["mismatch",3]]]],[11,"eq","","",16,[[["fold",3]]]],[11,"ne","","",16,[[["fold",3]]]],[11,"eq","","",17,[[["next",3]]]],[11,"ne","","",17,[[["next",3]]]],[11,"eq","","",20,[[["null",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"hash","","",4,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",8,[[]]],[11,"hash","","",10,[[]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","","",10,[[],["result",4]]],[11,"serialize","","",11,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"serialize","","",13,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"serialize","","",16,[[],["result",4]]],[11,"serialize","","",17,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"new","air_parser","",18,[[]]],[11,"next_token","","",18,[[],[["option",4],["result",4]]]],[11,"new","","",19,[[],["airparser",3]]],[11,"parse","","",19,[[["vec",3],["intoiterator",8]],[["box",3],["parseerror",4],["result",4]]]]],"p":[[4,"Instruction"],[4,"PeerPart"],[4,"FunctionPart"],[3,"Call"],[4,"CallArgValue"],[13,"JsonPath"],[4,"IterableValue"],[13,"JsonPath"],[4,"MatchableValue"],[13,"JsonPath"],[4,"CallOutputValue"],[3,"Seq"],[3,"Par"],[3,"Xor"],[3,"Match"],[3,"MisMatch"],[3,"Fold"],[3,"Next"],[3,"AIRLexer"],[3,"AIRParser"],[3,"Null"]]},\
"aqua_test_module":{"doc":"","i":[[5,"main","aqua_test_module","",null,[[]]],[3,"CallServiceResult","","",null,null],[12,"ret_code","","",0,null],[12,"result","","",0,null],[5,"call_service","","",null,[[["string",3]],["callserviceresult",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]]],"p":[[3,"CallServiceResult"]]},\
"aqua_test_utils":{"doc":"","i":[[3,"NEVec","aqua_test_utils","<code>NEVec<T></code> represents a non-empty <code>Vec<T></code>. It derefs to …",null,null],[3,"AquamarineVM","","",null,null],[3,"AquamarineVMConfig","","Describes behaviour of the Aquamarine VM stepper.",null,null],[12,"aquamarine_wasm_path","","Path to a aquamarine stepper Wasm file.",0,null],[12,"call_service","","Descriptor of a closure that will be invoked on …",0,null],[12,"current_peer_id","","Current peer id.",0,null],[12,"particle_data_store","","Path to a folder contains prev data. AquamarineVM uses it …",0,null],[12,"logging_mask","","Mask used to filter logs, for details see <code>log_utf8_string</code> …",0,null],[4,"AquamarineVMError","","",null,null],[13,"FaaSError","","FaaS errors.",1,null],[13,"StepperResultDeError","","Aquamarine stepper result deserialization errors.",1,null],[13,"PersistDataError","","I/O errors while persisting resulted data.",1,null],[13,"InvalidDataStorePath","","Errors related to particle_data_store path from supplied …",1,null],[13,"InvalidAquamarinePath","","Specified path to AIR interpreter .wasm file was invalid",1,null],[12,"invalid_path","aqua_test_utils::AquamarineVMError","",2,null],[12,"io_error","","",2,null],[12,"reason","","",2,null],[6,"CallServiceClosure","aqua_test_utils","",null,null],[4,"IType","","Represents the types supported by WIT.",null,null],[13,"S8","","A 8-bits signed integer.",3,null],[13,"S16","","A 16-bits signed integer.",3,null],[13,"S32","","A 32-bits signed integer.",3,null],[13,"S64","","A 64-bits signed integer.",3,null],[13,"U8","","A 8-bits unsigned integer.",3,null],[13,"U16","","A 16-bits unsigned integer.",3,null],[13,"U32","","A 32-bits unsigned integer.",3,null],[13,"U64","","A 64-bits unsigned integer.",3,null],[13,"F32","","A 32-bits float.",3,null],[13,"F64","","A 64-bits float.",3,null],[13,"String","","A string.",3,null],[13,"Array","","An array of values of the same type.",3,null],[13,"Anyref","","An <code>any</code> reference.",3,null],[13,"I32","","A 32-bits integer (as defined in WebAssembly core).",3,null],[13,"I64","","A 64-bits integer (as defined in WebAssembly core).",3,null],[13,"Record","","A record contains record index from interfaces AST.",3,null],[4,"IValue","","A WIT value.",null,null],[13,"S8","","A 8-bits signed integer.",4,null],[13,"S16","","A 16-bits signed integer.",4,null],[13,"S32","","A 32-bits signed integer.",4,null],[13,"S64","","A 64-bits signed integer.",4,null],[13,"U8","","A 8-bits unsigned integer.",4,null],[13,"U16","","A 16-bits unsigned integer.",4,null],[13,"U32","","A 32-bits unsigned integer.",4,null],[13,"U64","","A 64-bits unsigned integer.",4,null],[13,"F32","","A 32-bits float.",4,null],[13,"F64","","A 64-bits float.",4,null],[13,"String","","A string.",4,null],[13,"Array","","A byte array.",4,null],[13,"I32","","A 32-bits integer (as defined in WebAssembly core).",4,null],[13,"I64","","A 64-bits integer (as defiend in WebAssembly core).",4,null],[13,"Record","","A record.",4,null],[3,"ParticleParameters","","Information about the particle that is being executed by …",null,null],[12,"init_user_id","","",5,null],[12,"particle_id","","",5,null],[3,"StepperOutcome","","Describes a result returned at the end of the stepper …",null,null],[12,"ret_code","","A return code, where STEPPER_SUCCESS means success.",6,null],[12,"error_message","","Contains error message if ret_code != STEPPER_SUCCESS.",6,null],[12,"data","","Contains script data that should be preserved in an …",6,null],[12,"next_peer_pks","","Public keys of peers that should receive data.",6,null],[5,"create_aqua_vm","","",null,[[["callserviceclosure",6]],["aquamarinevm",3]]],[5,"unit_call_service","","",null,[[],["callserviceclosure",6]]],[5,"echo_string_call_service","","",null,[[],["callserviceclosure",6]]],[5,"echo_number_call_service","","",null,[[],["callserviceclosure",6]]],[5,"set_variable_call_service","","",null,[[],["callserviceclosure",6]]],[5,"set_variables_call_service","","",null,[[["hashmap",3],["string",3]],["callserviceclosure",6]]],[14,"call_vm","","",null,null],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"equivalent","","",7,[[]]],[11,"erased_serialize","","",7,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"init","","",8,[[]]],[11,"deref","","",8,[[]]],[11,"deref_mut","","",8,[[]]],[11,"drop","","",8,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"equivalent","","",3,[[]]],[11,"erased_serialize","","",3,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"init","","",5,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"drop","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"equivalent","","",6,[[]]],[11,"erased_serialize","","",6,[[["serializer",8]],[["ok",3],["error",3],["result",4]]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"default","","",5,[[],["particleparameters",3]]],[11,"fmt","","",5,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","","",5,[[],["particleparameters",3]]],[11,"from","","",1,[[["faaserror",4]],["aquamarinevmerror",4]]],[11,"from","","",1,[[["infallible",4]],["aquamarinevmerror",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"fmt","","",4,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",3,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",7,[[["formatter",3]],[["error",3],["result",4]]]],[11,"hash","","",7,[[]]],[11,"hash","","",3,[[]]],[11,"from","","",4,[[["string",3]],["ivalue",4]]],[11,"from","","",4,[[],["ivalue",4]]],[11,"from","","",4,[[],["ivalue",4]]],[11,"from","","",4,[[],["ivalue",4]]],[11,"from","","",4,[[],["ivalue",4]]],[11,"from","","",4,[[],["ivalue",4]]],[11,"from","","",4,[[],["ivalue",4]]],[11,"from","","",4,[[],["ivalue",4]]],[11,"from","","",4,[[],["ivalue",4]]],[11,"from","","",4,[[],["ivalue",4]]],[11,"from","","",4,[[],["ivalue",4]]],[11,"deserialize","","",3,[[],[["result",4],["itype",4]]]],[11,"deserialize","","",7,[[],[["result",4],["nevec",3]]]],[11,"parse","","",3,[[["parser",3]],[["result",4],["error",3],["itype",4]]]],[11,"default","","",4,[[],["ivalue",4]]],[11,"default","","",7,[[],["nevec",3]]],[11,"deref","","",7,[[]]],[11,"clone","","",3,[[],["itype",4]]],[11,"clone","","",7,[[],["nevec",3]]],[11,"clone","","",4,[[],["ivalue",4]]],[11,"to_bytes","","",3,[[],[["result",4],["error",3]]]],[11,"eq","","",7,[[["nevec",3]]]],[11,"ne","","",7,[[["nevec",3]]]],[11,"eq","","",3,[[["itype",4]]]],[11,"ne","","",3,[[["itype",4]]]],[11,"eq","","",4,[[["ivalue",4]]]],[11,"ne","","",4,[[["ivalue",4]]]],[11,"deserialize","","",6,[[],[["result",4],["stepperoutcome",3]]]],[11,"serialize","","",6,[[],["result",4]]],[11,"fmt","","",6,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","","",6,[[],["stepperoutcome",3]]],[11,"eq","","",6,[[["stepperoutcome",3]]]],[11,"ne","","",6,[[["stepperoutcome",3]]]],[11,"new","","Creates a new non-empty vector, based on an inner <code>Vec<T></code>. …",7,[[["vec",3],["global",3]],[["result",4],["nevec",3],["emptyvec",3]]]],[11,"into_vec","","Converts this NEVec into Vec",7,[[],[["vec",3],["global",3]]]],[11,"new","","Create AquamarineVM with provided config.",8,[[["aquamarinevmconfig",3]],[["result",4],["aquamarinevm",3],["aquamarinevmerror",4]]]],[11,"call","","",8,[[],[["result",4],["aquamarinevmerror",4],["stepperoutcome",3]]]],[11,"call_with_prev_data","","",8,[[],[["result",4],["aquamarinevmerror",4],["stepperoutcome",3]]]],[11,"from_ivalues","","",6,[[["vec",3],["global",3],["ivalue",4]],[["string",3],["result",4],["stepperoutcome",3]]]]],"p":[[3,"AquamarineVMConfig"],[4,"AquamarineVMError"],[13,"InvalidAquamarinePath"],[4,"IType"],[4,"IValue"],[3,"ParticleParameters"],[3,"StepperOutcome"],[3,"NEVec"],[3,"AquamarineVM"]]},\
"aquamarine":{"doc":"","i":[[0,"ast","aquamarine","",null,null],[5,"ast","aquamarine::ast","Parse AIR script and return it as minified JSON",null,[[["string",3]],["string",3]]],[0,"logger","aquamarine","",null,null],[17,"DEFAULT_LOG_LEVEL","aquamarine::logger","",null,null],[5,"init_logger","","",null,[[]]],[17,"WASM_LOG_ENV_NAME","aquamarine","",null,null],[5,"main","","",null,[[]]],[5,"invoke","","",null,[[["string",3],["vec",3]],["stepperoutcome",3]]],[5,"ast","","",null,[[["string",3]],["string",3]]],[5,"get_log_level","","",null,[[],["loglevel",4]]]],"p":[]},\
"aquamarine_client":{"doc":"","i":[[5,"main","aquamarine_client","",null,[[]]],[5,"__wasm_bindgen_generated_main","","",null,[[]]],[5,"invoke","","",null,[[["string",3],["vec",3]],["string",3]]],[5,"__wasm_bindgen_generated_invoke","","",null,[[]]],[5,"ast","","",null,[[["string",3]],["string",3]]],[5,"__wasm_bindgen_generated_ast","","",null,[[]]]],"p":[]},\
"polyplets":{"doc":"","i":[[3,"SecurityTetraplet","polyplets","Describes an origin returned corresponding value.",null,null],[12,"triplet","","Describes origin of the value in the network.",0,null],[12,"json_path","","Value was produced by applying this <code>json_path</code> to the …",0,null],[3,"ResolvedTriplet","","ResolvedTriplet represents peer network location with all …",null,null],[12,"peer_pk","","",1,null],[12,"service_id","","",1,null],[12,"function_name","","",1,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"clone","","",0,[[],["securitytetraplet",3]]],[11,"clone","","",1,[[],["resolvedtriplet",3]]],[11,"eq","","",0,[[["securitytetraplet",3]]]],[11,"ne","","",0,[[["securitytetraplet",3]]]],[11,"eq","","",1,[[["resolvedtriplet",3]]]],[11,"ne","","",1,[[["resolvedtriplet",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"literal_tetraplet","","Create a tetraplet for string literals defined in the …",0,[[["string",3]]]]],"p":[[3,"SecurityTetraplet"],[3,"ResolvedTriplet"]]},\
"stepper_interface":{"doc":"","i":[[17,"STEPPER_SUCCESS","stepper_interface","",null,null],[3,"StepperOutcome","","Describes a result returned at the end of the stepper …",null,null],[12,"ret_code","","A return code, where STEPPER_SUCCESS means success.",0,null],[12,"error_message","","Contains error message if ret_code != STEPPER_SUCCESS.",0,null],[12,"data","","Contains script data that should be preserved in an …",0,null],[12,"next_peer_pks","","Public keys of peers that should receive data.",0,null],[11,"from_ivalues","","",0,[[["ivalue",4],["vec",3]],[["string",3],["result",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"clone","","",0,[[],["stepperoutcome",3]]],[11,"eq","","",0,[[["stepperoutcome",3]]]],[11,"ne","","",0,[[["stepperoutcome",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"serialize","","",0,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]]],"p":[[3,"StepperOutcome"]]},\
"stepper_lib":{"doc":"","i":[[0,"log_targets","stepper_lib","",null,null],[17,"INSTRUCTION","stepper_lib::log_targets","Print out each instruction name at the beginning of its …",null,null],[17,"DATA_CACHE","","Print out data cache at the beginning of each instruction …",null,null],[17,"NEXT_PEER_PKS","","Print out next_peer_pks at the beginning of each …",null,null],[17,"SUBTREE_COMPLETE","","Print out subtree_complete value at the beginning of each …",null,null],[17,"EXECUTED_TRACE","","Print out current executed trace at the beginning of each …",null,null],[17,"SUBTREE_ELEMENTS","","Print out count of element in the current subtree at the …",null,null],[17,"NEW_EXECUTED_TRACE","","Print out state of data cache at the beginning of each …",null,null],[17,"EXECUTED_TRACE_MERGE","","Print out logs at the executed states merging stage.",null,null],[17,"RUN_PARAMS","","Print out running arguments and params of a script.",null,null],[17,"EXECUTED_STATE_CHANGING","","Print out state of data cache at the beginning of each …",null,null],[17,"JOIN_BEHAVIOUR","","Print log if call is postponed due the join behaviour.",null,null],[17,"TARGET_MAP","","This map should be used by rust-sdk logger that allows …",null,null],[0,"execution_trace","stepper_lib","",null,null],[4,"CallResult","stepper_lib::execution_trace","",null,null],[13,"RequestSentBy","","Request was sent to a target node by node with such …",0,null],[13,"Executed","","A corresponding call\'s been already executed with such …",0,null],[13,"CallServiceFailed","","call_service ended with a service error.",0,null],[4,"ExecutedState","","",null,null],[13,"Par","","",1,null],[13,"Call","","",1,null],[6,"ExecutionTrace","","",null,null],[0,"parser","stepper_lib","",null,null],[4,"Instruction","stepper_lib::parser","",null,null],[13,"Null","","",2,null],[13,"Call","","",2,null],[13,"Seq","","",2,null],[13,"Par","","",2,null],[13,"Xor","","",2,null],[13,"Match","","",2,null],[13,"MisMatch","","",2,null],[13,"Fold","","",2,null],[13,"Next","","",2,null],[13,"Error","","",2,null],[5,"parse","","Parse an AIR script to AST.",null,[[],[["result",4],["string",3],["box",3]]]],[3,"ResolvedTriplet","stepper_lib","ResolvedTriplet represents peer network location with all …",null,null],[12,"peer_pk","","",3,null],[12,"service_id","","",3,null],[12,"function_name","","",3,null],[3,"SecurityTetraplet","","Describes an origin returned corresponding value.",null,null],[12,"triplet","","Describes origin of the value in the network.",4,null],[12,"json_path","","Value was produced by applying this <code>json_path</code> to the …",4,null],[3,"StepperOutcome","","Describes a result returned at the end of the stepper …",null,null],[12,"ret_code","","A return code, where STEPPER_SUCCESS means success.",5,null],[12,"error_message","","Contains error message if ret_code != STEPPER_SUCCESS.",5,null],[12,"data","","Contains script data that should be preserved in an …",5,null],[12,"next_peer_pks","","Public keys of peers that should receive data.",5,null],[17,"STEPPER_SUCCESS","","",null,null],[5,"execute_aqua","","",null,[[["string",3],["vec",3]],["stepperoutcome",3]]],[14,"log_instruction","","",null,null],[14,"foldable_next","","",null,null],[14,"foldable_prev","","",null,null],[11,"from","stepper_lib::execution_trace","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","stepper_lib::parser","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"equivalent","","",2,[[]]],[11,"from","stepper_lib","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"equivalent","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"equivalent","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"equivalent","","",5,[[]]],[11,"fmt","stepper_lib::parser","",2,[[["formatter",3]],[["error",3],["result",4]]]],[11,"serialize","","",2,[[],["result",4]]],[11,"eq","","",2,[[["instruction",4]]]],[11,"ne","","",2,[[["instruction",4]]]],[11,"fmt","stepper_lib","",3,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",4,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","","",3,[[],["resolvedtriplet",3]]],[11,"clone","","",4,[[],["securitytetraplet",3]]],[11,"hash","","",3,[[]]],[11,"hash","","",4,[[]]],[11,"eq","","",4,[[["securitytetraplet",3]]]],[11,"ne","","",4,[[["securitytetraplet",3]]]],[11,"eq","","",3,[[["resolvedtriplet",3]]]],[11,"ne","","",3,[[["resolvedtriplet",3]]]],[11,"deserialize","","",3,[[],[["result",4],["resolvedtriplet",3]]]],[11,"deserialize","","",4,[[],[["result",4],["securitytetraplet",3]]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"deserialize","","",5,[[],[["stepperoutcome",3],["result",4]]]],[11,"serialize","","",5,[[],["result",4]]],[11,"fmt","","",5,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","","",5,[[],["stepperoutcome",3]]],[11,"eq","","",5,[[["stepperoutcome",3]]]],[11,"ne","","",5,[[["stepperoutcome",3]]]],[11,"clone","stepper_lib::execution_trace","",0,[[],["callresult",4]]],[11,"clone","","",1,[[],["executedstate",4]]],[11,"eq","","",0,[[["callresult",4]]]],[11,"ne","","",0,[[["callresult",4]]]],[11,"eq","","",1,[[["executedstate",4]]]],[11,"ne","","",1,[[["executedstate",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"literal_tetraplet","stepper_lib","Create a tetraplet for string literals defined in the …",4,[[["string",3]],["securitytetraplet",3]]],[11,"from_ivalues","","",5,[[["global",3],["vec",3],["ivalue",4]],[["stepperoutcome",3],["result",4],["string",3]]]]],"p":[[4,"CallResult"],[4,"ExecutedState"],[4,"Instruction"],[3,"ResolvedTriplet"],[3,"SecurityTetraplet"],[3,"StepperOutcome"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);